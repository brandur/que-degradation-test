#!/usr/bin/env ruby

require_relative "../common"

# + 1 extra for the main thread
DB = Sequel.connect(DATABASE_URL, max_connections: WORKER_COUNT + 1)
Que.connection = DB
Que.logger = Logger.new($stdout)
Que.mode = :async
Que.worker_count = WORKER_COUNT

Que.log_formatter = lambda do |data|
  case data[:event].to_sym
  when :job_worked
    Metrics.measure "work-time", data[:elapsed]
  end

  nil
end

# Exit immediately, killing any in-flight jobs
trap('INT') do
  puts "received SIGINT"
  exit
end

stop = false
# Exit gracefully, finishing any in-flight jobs.
trap('TERM') do
  puts "received SIGTERM"
  stop = true
end

def oldest_xact
  DB[:pg_stat_activity].
    all.
    select { |a| a[:xact_start] }.
    map { |a| Time.now - a[:xact_start] }.
    max
end

loop do
  Metrics.sample "queue-count", DB[:que_jobs].count, "jobs"
  Metrics.sample "oldest-xact", oldest_xact, "s"
  sleep 0.5
  break if stop
end
